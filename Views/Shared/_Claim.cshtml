@model PPCP07302018.Models.MemberVisit
@using Kendo.Mvc.UI

@{
    var ServiceUrl = (System.Configuration.ConfigurationManager.AppSettings["ServiceUrl"].ToString());
}

<style>
    .loadingSpinner {
        position: absolute;
        z-index: 1000;
        top: 0;
        left: 0;
        height: 100%;
        width: 100%;
        background: rgba( 255, 255, 255, .8 ) url('../../Images/loading-spinner-red.gif') 50% 50% no-repeat;
    }

    .claimStatusButton {
        cursor: pointer;
        font-family: Verdana;
        color: #ffffff;
        font-size: 14px;
        height: 25px;
        text-decoration: none;
        padding-left: 30px;
        padding-right: 30px;
        -webkit-border-radius: 10px;
        -moz-border-radius: 10px;
        border-radius: 12px;
    }

    .claimStatusButtonGreen {
        border: solid #00a884 2px;
        border-color: #00a884 #00a884 #00a884 #00a884;
        background: #718ca1; /* Old browsers */
        background: -moz-linear-gradient(top, #00a884 14%, #00a884 47%, #00a884 79%); /* FF3.6+ */
        background: -webkit-gradient(linear, left top, left bottom, color-stop(14%,#00a884), color-stop(47%,#00a884), color-stop(79%,#00a884)); /* Chrome,Safari4+ */
        background: -webkit-linear-gradient(top, #00a884 14%,#00a884 47%,#00a884 79%); /* Chrome10+,Safari5.1+ */
        background: -o-linear-gradient(top, #00a884 14%,#00a884 47%,#00a884 79%); /* Opera 11.10+ */
        background: -ms-linear-gradient(top, #00a884 14%,#00a884 47%,#00a884 79%); /* IE10+ */
        background: linear-gradient(to bottom, #00a884 14%,#00a884 47%,#00a884 79%); /* W3C */
        filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='##00a884', endColorstr='##00a884',GradientType=0 ); /* IE6-9 */
    }

    .claimStatusButtonRed {
        border: solid #FF5050 2px;
        border-color: #FF5050 #FF5050 #FF5050 #FF5050;
        background: #718ca1; /* Old browsers */
        background: -moz-linear-gradient(top, #FF5050 14%, #FF5050 47%, #FF5050 79%); /* FF3.6+ */
        background: -webkit-gradient(linear, left top, left bottom, color-stop(14%,#FF5050), color-stop(47%,#FF5050), color-stop(79%,#FF5050)); /* Chrome,Safari4+ */
        background: -webkit-linear-gradient(top, #FF5050 14%,#FF5050 47%,#FF5050 79%); /* Chrome10+,Safari5.1+ */
        background: -o-linear-gradient(top, #FF5050 14%,#FF5050 47%,#FF5050 79%); /* Opera 11.10+ */
        background: -ms-linear-gradient(top, #FF5050 14%,#FF5050 47%,#FF5050 79%); /* IE10+ */
        background: linear-gradient(to bottom, #FF5050 14%,#FF5050 47%,#FF5050 79%); /* W3C */
        filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='##FF5050', endColorstr='##FF5050',GradientType=0 ); /* IE6-9 */
    }

    .claimStatusButtonBlue {
        border: solid #1434A4 2px;
        border-color: #1434A4 #1434A4 #1434A4 #1434A4;
        background: #718ca1; /* Old browsers */
        background: -moz-linear-gradient(top, #1434A4 14%, #1434A4 47%, #1434A4 79%); /* FF3.6+ */
        background: -webkit-gradient(linear, left top, left bottom, color-stop(14%,#1434A4), color-stop(47%,#1434A4), color-stop(79%,#1434A4)); /* Chrome,Safari4+ */
        background: -webkit-linear-gradient(top, #1434A4 14%,#1434A4 47%,#1434A4 79%); /* Chrome10+,Safari5.1+ */
        background: -o-linear-gradient(top, #1434A4 14%,#1434A4 47%,#1434A4 79%); /* Opera 11.10+ */
        background: -ms-linear-gradient(top, #1434A4 14%,#1434A4 47%,#1434A4 79%); /* IE10+ */
        background: linear-gradient(to bottom, #1434A4 14%,#1434A4 47%,#1434A4 79%); /* W3C */
        filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='##1434A4', endColorstr='##1434A4',GradientType=0 ); /* IE6-9 */
    }

    .claimStatusButtonYellow {
        border: solid #FFBF00 2px;
        border-color: #FFBF00 #FFBF00 #FFBF00 #FFBF00;
        background: #718ca1; /* Old browsers */
        background: -moz-linear-gradient(top, #FFBF00 14%, #FFBF00 47%, #FFBF00 79%); /* FF3.6+ */
        background: -webkit-gradient(linear, left top, left bottom, color-stop(14%,#FFBF00), color-stop(47%,#FFBF00), color-stop(79%,#FFBF00)); /* Chrome,Safari4+ */
        background: -webkit-linear-gradient(top, #FFBF00 14%,#FFBF00 47%,#FFBF00 79%); /* Chrome10+,Safari5.1+ */
        background: -o-linear-gradient(top, #FFBF00 14%,#FFBF00 47%,#FFBF00 79%); /* Opera 11.10+ */
        background: -ms-linear-gradient(top, #FFBF00 14%,#FFBF00 47%,#FFBF00 79%); /* IE10+ */
        background: linear-gradient(to bottom, #FFBF00 14%,#FFBF00 47%,#FFBF00 79%); /* W3C */
        filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='##FFBF00', endColorstr='##FFBF00',GradientType=0 ); /* IE6-9 */
    }
</style>

<div class="pageheading_bar" align="center">
    <b>Claim Submission</b>
</div>

@Html.HiddenFor(m => m.VisitId)
@Html.HiddenFor(m => m.OrganizationID)


<div id="memberSearch">
    <div class="Panel_bg">

        <div>
            <fieldset style="display:block">
                <div style="display: block;">
                    <div class="Page_Dimmer1">
                    </div>
                    <div class="PopupHolder2" style="height:auto;">

                        <div class="Panel_bg_Sub">
                            <div style="width: 100%;height:auto;">
                                <div class="col-xs-12 col-md-12 col-sm-12 col-lg-12" style="display:block">
                                    <div class="row">
                                        <div class="col-xs-6 col-md-3 col-sm-6 col-lg-4">
                                            @Html.TextBox("searchFilter", null, new { @class = "customKendoTextBox", placeholder = "First Name/Last Name/Mobile Number", style = "width:100%;", maxlength = 100 })
                                        </div>
                                        <div class="col-xs-6 col-md-6 col-sm-6 col-lg-6">
                                            <button type="button" title="Search" style="width: 150px;" class="button_blue" value="Search" onclick="searchMember()">
                                                Search Member
                                            </button>
                                            <button type="button" title="Clear" value="Clear" style="width: 100px;" class="button_blue" onclick="searchClear()">
                                                Clear
                                            </button>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </fieldset>

            <div class="form-group">
                <div class="row">
                    <div class="col-xs-12 col-md-12 col-sm-12 col-lg-12">
                        @Html.Hidden("RedirectTo", Url.Action("ViewMemberDetails", "Organization"))
                        @(Html.Kendo().Grid<PPCP07302018.Models.Organization.AddMemberDetails> ()
                                .Name("memberGrid")
                                .Columns(columns =>
                                {
                                    columns.Bound(p => p.OrganizationName).Title("Organization Name").Filterable(true).Width(100).Visible(false);
                                    columns.Bound(p => p.MemberID).Title("MemberID").Filterable(true).Width(130).Visible(false);
                                    columns.Bound(p => p.MemberName).Title("Member Name").ClientTemplate("#: FirstName # #: LastName #").Filterable(true).Width(150);
                                    columns.Bound(p => p.CountryCode).Title("Country Code").Filterable(true).Width(120).Visible(false);
                                    columns.Bound(p => p.MobileNumber).Title("Mobile Number").Filterable(true).Width(120);
                                    columns.Bound(p => p.PlanStartDate).Title("Plan Start Date").ClientTemplate("#= kendo.toString(kendo.parseDate(PlanStartDate,'yyyy-MM-dd'), '" + "MM/dd/yyyy" + "') #").Filterable(true).Width(120);
                                    columns.Bound(p => p.PlanEndDate).Title("Plan End Date").ClientTemplate("#= kendo.toString(kendo.parseDate(PlanEndDate,'yyyy-MM-dd'), '" + "MM/dd/yyyy" + "') #").Filterable(true).Width(120);
                                    // columns.Bound(p => p.SalutationID).Title("SalutationID").Filterable(true).Width(130).Visible(false);
                                    columns.Bound(p => p.Email).Title("Email").Filterable(true).Width(120).Visible(false);

                                    columns.Bound(p => p.IsPlanActive).Width(100)
                                                .ClientTemplate("#if(IsPlanActive) {# " +
                                                                      "Active" +
                                                                  "#} else {#" +
                                                                      "<span style='color:red; font-weight:bold'>In-Active</span>" +
                                                                  "#} #");

                                    if (System.Web.HttpContext.Current.Request.RequestContext.RouteData.Values["action"].ToString() == "ClaimSubmission")
                                    {
                                        columns.Bound(p => p).Title("Action").Width(100)
                                        .ClientTemplate("<a onclick='SubmitNewClaim(#=MemberID#,\"#=MemberCardID#\", \"#=FirstName#\",\"#=LastName#\",\"#=Email#\",\"#=CountryCode#\",\"#=MobileNumber#\",\"#=DOB#\",\"#=PlanName#\",\"#=PlanStartDate#\",\"#=PlanEndDate#\",\"#=IsPlanActive#\");' <span style='cursor:pointer'>Submit Claim</a>");
                                    }
                                    //columns.Bound(p => p).ClientTemplate(
                                    //    "<a onclick='EditOptions(#=MemberID#,\"#=FirstName#\",\"#=LastName#\",\"#=CountryCode#\",\"#=MobileNumber#\",\"#=DOB#\",\"#=Gender#\",\"#=Email#\",\"#=CountryName#\",\"#=StateName#\",\"#=CityName#\",\"#=Zip#\",\"#=Salutation#\",\"#=CountryID#\",\"#=StateID#\",\"#=CityID#\",\"#=IsTwofactorAuthentication#\",\"#=TwoFactorType#\");' <span style='cursor:pointer'>View</a>").Title("Action").Width(60).Filterable(false).HeaderHtmlAttributes(new { style = "overflow: visible; white-space: normal" }).Width(50);

                                    //columns.Bound(p => p).ClientTemplate(
                                    //                                    "<a onclick='ViewMemberCard(#=MemberID#,#=Plan_Code#,\"#=MemberPlanID#\",\"#=PlanType#\");' <span style='cursor:pointer'>Download</a>").Title("ID Card").Width(60).Filterable(false).HeaderHtmlAttributes(new { style = "overflow: visible; white-space: normal" }).Width(80);

                                })
                                .Scrollable()
                                .Pageable()
                                .Filterable()
                                .AutoBind(false)
                                .HtmlAttributes(new { style = "height: 500px; min-height: 300px;" })
                                .Selectable()
                                .DataSource(dataSource => dataSource
                                .Ajax()
                                .PageSize(50)
                                .ServerOperation(false)))
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="Panel_bg" id="divMainMemberDetails" style="width: 100%">
    <div class="row Panel_bg_Sub">
        @if (Model.ClaimStatusId == PPCP07302018.Utils.GlobalFunctions.ClaimStatus.Paid || Model.ClaimStatusId == PPCP07302018.Utils.GlobalFunctions.ClaimStatus.Approved)
        {
            <legend class="Legendtxtcolor" style="float: left; font-size: 14px;"><b>Payment Status</b></legend>
        }
        else
        {
            <legend class="Legendtxtcolor" style="float: left; font-size: 14px;"><b>Claim Status</b></legend>
        }
        <div class="row">
            @if (Session["RoleType"].ToString() == "MPP")
            {
                <div class="col-xs-12 col-md-4 col-sm-4 col-lg-4">
                    @Html.Label("Provider Name: ", new { style = "font-weight:normal;", @class = "" }) <b> @Model.OrganizationName</b>
                </div>
            }
            @if (!string.IsNullOrEmpty(Model.ClaimSubStatus))
            {
                <div class="col-xs-12 col-md-3 col-sm-6 col-lg-3">
                    @Html.Label("Claim Status Reason", new { style = "font-weight:normal;", @class = "" }) <b> @Model.ClaimSubStatus</b>
                </div>
            }

            @{ var blueStatusList = new List<int> { 1, 2 }; var yellowStatusList = new List<int> { 3 }; var redStatusList = new List<int> { 4 }; var greenStatusList = new List<int> { 5, 6 }; }
            <div style="float: right">
                <button type="submit" title="Claim Status" style=" " disabled
                        class="claimStatusButton @(Model.ClaimStatus == "New" || blueStatusList.Contains(Model.ClaimStatusId) ? "claimStatusButtonBlue" : "")
                                                    @(yellowStatusList.Contains(Model.ClaimStatusId) ? "claimStatusButtonYellow" : "")
                                                    @(redStatusList.Contains(Model.ClaimStatusId) ? "claimStatusButtonRed" : "")
                                                    @(greenStatusList.Contains(Model.ClaimStatusId) ? "claimStatusButtonGreen" :"" )">
                    @Model.ClaimStatus
                </button>
            </div>
        </div>
        @if (Model.ClaimStatusId == PPCP07302018.Utils.GlobalFunctions.ClaimStatus.Verification)
        {
            <div class="form-group">
                <div class="row">
                    <div class="col-xs-12 col-md-3 col-sm-6 col-lg-3">
                        @Html.Label("Submit Date", new { style = "font-weight:normal;", @class = "" })<br />
                        @Html.TextBoxFor(model => model.SubmitDate, "{0:MM/dd/yyyy}", new { @class = "customKendoTextBox disabled", @disabled = "disabled", style = "width:100%;" })
                    </div>
                </div>
            </div>
        }
        @if (Model.ClaimStatusId == PPCP07302018.Utils.GlobalFunctions.ClaimStatus.Paid || Model.ClaimStatusId == PPCP07302018.Utils.GlobalFunctions.ClaimStatus.Approved)
        {
            <div class="form-group">
                <div class="row">
                    <div class="col-xs-12 col-md-3 col-sm-6 col-lg-3">
                        @Html.Label("Submit Date", new { style = "font-weight:normal;", @class = "" })<br />
                        @Html.TextBoxFor(model => model.SubmitDate, "{0:MM/dd/yyyy}", new { @class = "customKendoTextBox disabled", @disabled = "disabled", style = "width:100%;" })
                    </div>
                    <div class="col-xs-12 col-md-3 col-sm-6 col-lg-3">
                        @Html.Label("Plan Paid Date", new { style = "font-weight:normal;", @class = "" })<br />
                        @Html.TextBoxFor(model => model.PlanPaidDate, "{0:MM/dd/yyyy}", new { @class = "customKendoTextBox disabled", @disabled = "disabled", style = "width:100%;" })
                    </div>
                    <div class="col-xs-12 col-md-3 col-sm-6 col-lg-3">
                        @Html.Label("Plan Paid Amount", new { style = "font-weight:normal;", @class = "" })<br />
                        @Html.TextBoxFor(model => model.PlanPaidAmount, null, new { @class = "customKendoTextBox disabled", @disabled = "disabled", style = "width:100%;", Value = String.Format("{0:C}", Model.PlanPaidAmount) })
                    </div>
                </div>
                @if (Session["RoleType"].ToString() == "MPP" && Model.ManualApprovalBy != 0)
                {
                    <div class="row">
                        <div class="col-xs-12 col-md-6 col-sm-6 col-lg-6">
                            @Html.Label("Admin Notes", new { style = "font-weight:normal;", @class = "" })<br />
                            @Html.TextAreaFor(model => model.AdminNotes, new { @class = "customKendoTextBox disabled", style = "width:100%;", @disabled = "disabled", maxlength = 5000 })
                            <span id="errAdminNotes" style="color:red"></span>
                        </div>
                        <div class="col-xs-12 col-md-3 col-sm-6 col-lg-3">
                            @Html.Label("Manual Approval Date", new { style = "font-weight:normal;", @class = "" })<br />
                            @Html.TextBoxFor(model => model.ManualApprovalDate, "{0:MM/dd/yyyy}", new { @class = "customKendoTextBox disabled", @disabled = "disabled", style = "width:100%;" })
                        </div>
                        <div class="col-xs-12 col-md-3 col-sm-6 col-lg-3">
                            @Html.Label("Manual Approval By", new { style = "font-weight:normal;", @class = "" })<br />
                            @Html.TextBoxFor(model => model.ManualApprovalUserName, null, new { @class = "customKendoTextBox disabled", @disabled = "disabled", style = "width:100%;" })
                        </div>
                    </div>
                }
            </div>
        }
    </div>

    @if (Session["RoleType"].ToString() == "MPP" && (Model.ClaimStatusId == PPCP07302018.Utils.GlobalFunctions.ClaimStatus.Verification
                                                        || Model.ClaimStatusId == PPCP07302018.Utils.GlobalFunctions.ClaimStatus.Denied))
    {
        <div class="row Panel_bg_Sub">
            <legend class="Legendtxtcolor" style="float: left; font-size: 14px;"><b>Admin Actions</b></legend>
            <div id="formstatus" style="height: 30px; font-weight: 600; top: 15px; padding-left: 20px; "> </div>
            <div class="form-group">
                <div class="row">
                    <div class="col-xs-12 col-md-6 col-sm-6 col-lg-6">
                        @Html.Label("Member Confirmation", new { style = "font-weight:normal;", @class = "" })<br />
                        <a href="#" onclick="resendText()" style="font-size:small; color: blue; ">Resend Text</a>&nbsp;&nbsp;&nbsp;&nbsp;
                        <a href="#" onclick="resendEmail()" style="font-size:small; color: blue;">Resend Email</a>
                    </div>
                </div>
                <div class="row">
                    <div class="col-xs-12 col-md-6 col-sm-6 col-lg-6">
                        @Html.Label("Admin Notes", new { style = "font-weight:normal;", @class = "" })<br />
                        @Html.TextAreaFor(model => model.AdminNotes, new { @class = "customKendoTextBox", style = "width:100%;", maxlength = 5000 })
                        <span id="errAdminNotes" style="color:red"></span>
                    </div>
                    <div class="col-xs-12 col-md-3 col-sm-6 col-lg-3" style="margin-top: 25px">
                        <button title="Close" style="width: 200px" class="button_blue" onclick="ClaimApproveClick()">
                            Approve Claim
                        </button>
                    </div>
                </div>
            </div>
        </div>
    }

    <div class="row Panel_bg_Sub">
        <legend class="Legendtxtcolor" style="float: left; font-size: 14px;"><b>Member Details</b></legend>
        <div class="form-group">
            <div class="row">
                <div class="col-xs-12 col-md-12 col-sm-12 col-lg-12">
                    <div class="row">
                        <div class="col-xs-12 col-md-3 col-sm-6 col-lg-3">
                            @Html.HiddenFor(m => m.MemberId)
                            @Html.Label("Member Id", new { style = "font-weight:normal;", @class = "" })<br />
                            @Html.TextBoxFor(model => model.MemberCardID, null, new { @class = "customKendoTextBox disabled", @disabled = "disabled", style = "width:100%;" })
                        </div>
                        <div class="col-xs-12 col-md-3 col-sm-6 col-lg-3">
                            @Html.Label("Member Name", new { style = "font-weight:normal;", @class = "" })<br />
                            @Html.TextBoxFor(model => model.MemberName, null, new { @class = "customKendoTextBox disabled", @disabled = "disabled", style = "width:100%;" })
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-xs-12 col-md-3 col-sm-6 col-lg-3">
                            @Html.Label("Date of Birth", new { style = "font-weight:normal;", @class = "" })<br />
                            @Html.TextBoxFor(model => model.MemberDOB, "{0:MM/dd/yyyy}", new { @class = "customKendoTextBox disabled", @disabled = "disabled", style = "width:100%;" })
                        </div>
                        <div class="col-xs-12 col-md-3 col-sm-6 col-lg-3">
                            @Html.Label("Mobile Number", new { style = "font-weight:normal;", @class = "" })<br />
                            @Html.TextBoxFor(model => model.MemberMobileNumber, null, new { @class = "customKendoTextBox disabled", @disabled = "disabled", style = "width:100%;" })
                        </div>
                        <div class="col-xs-12 col-md-3 col-sm-6 col-lg-3">
                            @Html.Label("Email", new { style = "font-weight:normal;", @class = "" })<br />
                            @Html.TextBoxFor(model => model.MemberEmail, null, new { @class = "customKendoTextBox disabled", @disabled = "disabled", style = "width:100%;" })
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <legend class="Legendtxtcolor" style="float: left; font-size: 14px; "><b>Member PPV Plans</b></legend>
        <div class="form-group">
            <div class="row">
                <div class="col-xs-12 col-md-12 col-sm-12 col-lg-12">
                    <div class="row">
                        @(Html.Kendo().Grid<PPCP07302018.Models.Member.MemberPlan> ()
                                        .Name("memberPlanGrid")
                                        .Columns(columns =>
                                        {
                                            columns.Bound(p => p.PlanName).Title("Plan Name").Width(130);
                                            columns.Bound(p => p.PlanStartDate).Title("Plan Start Date").ClientTemplate("#= kendo.toString(kendo.parseDate(PlanStartDate,'yyyy-MM-dd'), '" + "MM/dd/yyyy" + "') #").Filterable(true).Width(120);
                                            columns.Bound(p => p.PlanEndDate).Title("Plan End Date").ClientTemplate("#= kendo.toString(kendo.parseDate(PlanEndDate,'yyyy-MM-dd'), '" + "MM/dd/yyyy" + "') #").Filterable(true).Width(120);
                                            columns.Bound(p => p.VisitFee).Title("In Person Copay").Width(130);
                                            columns.Bound(p => p.TeleVisitFee).Title("Tele Visit Copy").Width(130);
                                            columns.Bound(p => p.IsActive).Width(100)
                                                        .ClientTemplate("#if(IsActive) {# " +
                                                                              "Active" +
                                                                          "#} else {#" +
                                                                              "<span style='color:red; font-weight:bold'>In-Active</span>" +
                                                                          "#} #");

                                        })
                                        .Scrollable(s => s.Height("auto"))
                                        .AutoBind(false)
                                        .HtmlAttributes(new { style = " max-height: 200px" })
                                        .Events(events => events
                                            .DataBound("memberPlanDatabound")
                                        )
                                        .DataSource(dataSource => dataSource
                                            .Ajax()
                                            .PageSize(50)
                                            .Sort(sort => sort.Add("PlanStartDate").Descending())
                                            .ServerOperation(false)
                                        ))
                        @*<div class="col-xs-12 col-md-3 col-sm-6 col-lg-3">
                                @Html.Label("Plan Name", new { style = "font-weight:normal;", @class = "" })<br />
                                @Html.TextBoxFor(model => model.PlanName, null, new { @class = "customKendoTextBox disabled", @disabled = "disabled", style = "width:100%;", maxlength = 50 })
                            </div>
                            <div class="col-xs-12 col-md-3 col-sm-6 col-lg-3">
                                @Html.Label("Plan Start Date", new { style = "font-weight:normal;", @class = "" })<br />
                                @Html.TextBoxFor(model => model.PlanStartDate, "{0:MM/dd/yyyy}", new { @class = "customKendoTextBox disabled", @disabled = "disabled", style = "width:100%;", maxlength = 50 })
                            </div>

                            <div class="col-xs-12 col-md-3 col-sm-6 col-lg-3">
                                @Html.Label("Plan End Date", new { style = "font-weight:normal;", @class = "" })<br />
                                @Html.TextBoxFor(model => model.PlanEndDate, "{0:MM/dd/yyyy}", new { @class = "customKendoTextBox disabled", @disabled = "disabled", style = "width:100%;", maxlength = 50 })
                            </div>*@
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="row Panel_bg_Sub">
        <legend class="Legendtxtcolor" style="float: left; font-size: 14px;"><b>Encounter Detail</b></legend>
        @*<span style="color: orangered">@(Model.IsPlanExistingOnDOS ? "" : "Please check the Date of Service. ")</span>*@
        <div class="form-group">
            <div class="row">
                <div class="col-xs-12 col-md-3 col-sm-6 col-lg-3">
                    @Html.Label("Date of Service", new { style = "font-weight:normal;", @class = "" })<br />
                    @( Html.Kendo().DatePickerFor(model => model.DateOfService).Format("MM/dd/yyyy")
                        .Value(DateTime.Today).Max(DateTime.Today)
                        .Events(e =>
                        {
                            e.Change("DateOfServiceChange");
                        })
                        .HtmlAttributes(new {  PlaceHolder = "MM/DD/YYYY", style = "width:100%;", Maxlength = "10", type = "text" }))
                    <span id="errDateOfService" style="color:red"></span>
                </div>
                <div class="col-xs-12 col-md-9 col-sm-6 col-lg-9" style="margin-top: 10px;">
                    <br />
                    <span id="errDOS" style="color: orangered;"></span>
                    <span id="dosPlan" style="color: mediumblue; "></span>
                </div>
            </div>
            <div class="row" style="margin-top: 30px;">
                <div class="col-xs-12 col-md-3 col-sm-6 col-lg-3">
                    @Html.Label("Visit Type", new { style = "font-weight:normal;", @class = "" })<span style="color: Red;">*</span><br />
                    <label style="font-weight: normal;">
                        @(Html.RadioButtonFor(m => m.VisitTypeId, PPCP07302018.Utils.GlobalFunctions.VisitType.InPerson, Model.VisitTypeId == @PPCP07302018.Utils.GlobalFunctions.VisitType.InPerson ? new { @checked = "checked", id="rbInPerson" } : null))
                        In Person
                    </label>
                    <label style="font-weight: normal; margin-left:20px">
                        @(Html.RadioButtonFor(m => m.VisitTypeId, PPCP07302018.Utils.GlobalFunctions.VisitType.TeleVisit, Model.VisitTypeId == @PPCP07302018.Utils.GlobalFunctions.VisitType.TeleVisit ? new { @checked = "checked" } : null))
                        Tele Visit
                    </label>
                    <br />
                    <span id="errVisitTypeId" style="color:red"></span>
                </div>
                <div class="col-xs-12 col-md-3 col-sm-6 col-lg-3">
                    @Html.Label("Provider", new { style = "font-weight:normal;", @class = "" })<br />
                    @(Html.Kendo().DropDownListFor(model => model.ProviderId)
                        .Name("providerList")
                        .OptionLabel("--Select--")
                        .HtmlAttributes(new { style = "width:100%;" })
                        .DataValueField("ProviderID")
                        .DataTextField("ProviderName").Template("#:data.ProviderName# | #:data.NPI#")
                        .Events(e =>
                        {
                            e.DataBound("onProviderDropdownDataBound");
                        })
                        .DataSource(source =>
                        {
                            source.Read(read =>
                            {
                            });
                        }))
                    <span id="errProviderID" style="color:red"></span>
                </div>
                <div class="col-xs-12 col-md-3 col-sm-6 col-lg-3">
                    @Html.Label("Primary Procedure Code", new { style = "font-weight:normal;", @class = "" })<span style="color: Red;">*</span><br />
                    @Html.TextBoxFor(model => model.PrimaryProcedureCode, null, new { @class = "customKendoTextBox", style = "width:100%;", maxlength = 10 })
                    <span id="errPrimaryProcedureCode" style="color:red"></span>
                </div>
                <div class="col-xs-12 col-md-3 col-sm-6 col-lg-3">
                    @Html.Label("Primary Diagnosis Code", new { style = "font-weight:normal;", @class = "" })<span style="color: Red;">*</span><br />
                    @Html.TextBoxFor(model => model.PrimaryDiagnosisCode, null, new { @class = "customKendoTextBox", style = "width:100%;", maxlength = 10 })
                    <span id="errPrimaryDiagnosisCode" style="color:red"></span>
                </div>
            </div>
            <div class="row" style="margin-top: 30px;">
                <div class="col-xs-12 col-md-3 col-sm-6 col-lg-3">
                    @Html.Label("Addl. Procedure Code", new { style = "font-weight:normal;", @class = "" })
                </div>
                <div class="col-xs-12 col-md-2 col-sm-6 col-lg-2">
                    @Html.Label("Modifier1", new { style = "font-weight:normal;", @class = "" })
                </div>
                <div class="col-xs-12 col-md-2 col-sm-6 col-lg-2">
                    @Html.Label("Modifier2", new { style = "font-weight:normal;", @class = "" })
                </div>
                <div class="col-xs-12 col-md-2 col-sm-6 col-lg-2">
                    @Html.Label("Modifier3", new { style = "font-weight:normal;", @class = "" })
                </div>
                <div class="col-xs-12 col-md-2 col-sm-6 col-lg-2">
                    @Html.Label("Modifier4", new { style = "font-weight:normal;", @class = "" })
                </div>
            </div>
            <div class="row">
                @for (int i = 0; i < Model.ProcedureLines.Count; i++)
                {
                    <div class="row">
                        <div class="col-xs-12 col-md-3 col-sm-6 col-lg-3">
                            @Html.TextBoxFor(model => model.ProcedureLines[i].ProcCode, null, new { @class = "customKendoTextBox proclines", style = "width:100%;", maxlength = 10 })
                        </div>
                        <div class="col-xs-12 col-md-2 col-sm-6 col-lg-2">
                            @Html.TextBoxFor(model => model.ProcedureLines[i].Modifier1, null, new { @class = "customKendoTextBox proclines", style = "width:100%;", maxlength = 10 })
                        </div>
                        <div class="col-xs-12 col-md-2 col-sm-6 col-lg-2">
                            @Html.TextBoxFor(model => model.ProcedureLines[i].Modifier2, null, new { @class = "customKendoTextBox proclines", style = "width:100%;", maxlength = 10 })
                        </div>
                        <div class="col-xs-12 col-md-2 col-sm-6 col-lg-2">
                            @Html.TextBoxFor(model => model.ProcedureLines[i].Modifier3, null, new { @class = "customKendoTextBox proclines", style = "width:100%;", maxlength = 10 })
                        </div>
                        <div class="col-xs-12 col-md-2 col-sm-6 col-lg-2">
                            @Html.TextBoxFor(model => model.ProcedureLines[i].Modifier4, null, new { @class = "customKendoTextBox proclines", style = "width:100%;", maxlength = 10 })
                        </div>
                    </div>
                }
            </div>

            <legend class="Legendtxtcolor" style="float: left; font-size: 14px; margin-top: 15px;"><b>Fees</b></legend>
            <div class="row">
                <div class="col-xs-12 col-md-3 col-sm-6 col-lg-3">
                    @Html.Label("Co-Pay Paid", new { style = "font-weight:normal;", @class = "" })<span style="color: Red;">*</span><br />
                    @Html.TextBoxFor(model => model.Copay, null, new { @class = "customKendoTextBox disabled", @disabled = "disabled", style = "width:100%;", maxlength = 10, onchange = "CalculateTotalPaid();", Value = String.Format("{0:C}", Model.Copay) })
                    <span id="errCopay" style="color:red"></span>
                </div>
                <div class="col-xs-12 col-md-3 col-sm-6 col-lg-3">
                    @Html.Label("Other Charges Paid", new { style = "font-weight:normal;", @class = "" })<span style="color: Red;">*</span><br />
                    @Html.TextBoxFor(model => model.OtherCharges, null, new { @class = "customKendoTextBox", style = "width:100%;", maxlength = 10, onchange = "CalculateTotalPaid();", Value = String.Format("{0:C}", Model.OtherCharges) })
                    <span id="errOtherCharges" style="color:red"></span>
                </div>
                <div class="col-xs-12 col-md-6 col-sm-6 col-lg-6">
                    @Html.Label("Payment Type", new { style = "font-weight:normal;", @class = "" })<span style="color: Red;">*</span><br />
                    <label style="font-weight: normal;">
                        @(Html.RadioButtonFor(m => m.PaymentTypeId, PPCP07302018.Utils.GlobalFunctions.PaymentType.Credit, Model.PaymentTypeId == @PPCP07302018.Utils.GlobalFunctions.PaymentType.Credit ? new { @checked = "checked" } : null))
                        Credit Card
                    </label>
                    <label style="font-weight: normal; margin-left:20px">
                        @(Html.RadioButtonFor(m => m.PaymentTypeId, PPCP07302018.Utils.GlobalFunctions.PaymentType.Cash, Model.PaymentTypeId == @PPCP07302018.Utils.GlobalFunctions.PaymentType.Cash ? new { @checked = "checked" } : null))
                        Cash
                    </label>
                    <label style="font-weight: normal; margin-left:20px">
                        @(Html.RadioButtonFor(m => m.PaymentTypeId, PPCP07302018.Utils.GlobalFunctions.PaymentType.Check, Model.PaymentTypeId == @PPCP07302018.Utils.GlobalFunctions.PaymentType.Check ? new { @checked = "checked" } : null))
                        Check
                    </label><br />
                    <span id="errPaymentTypeId" style="color:red"></span>
                </div>
            </div>
            <div class="row">
                <div class="col-xs-12 col-md-3 col-sm-6 col-lg-3">
                    @Html.Label("Total Paid", new { style = "font-weight:normal;", @class = "" })<span style="color: Red;">*</span><br />
                    @Html.TextBox("TotalPaid", null, new { @class = "customKendoTextBox disabled", @disabled = "disabled", style = "width:100%;", maxlength = 50 })
                </div>
                <div class="col-xs-12 col-md-3 col-sm-6 col-lg-3"></div>
                <div class="col-xs-12 col-md-3 col-sm-6 col-lg-3">
                    @Html.Label("Payment Date", new { style = "font-weight:normal;", @class = "" })<span style="color: Red;">*</span><br />
                    @( Html.Kendo().DatePickerFor(model => model.PaymentDate).Format("MM/dd/yyyy").Value(DateTime.Today).Max(DateTime.Today).HtmlAttributes(new {  PlaceHolder = "MM/DD/YYYY", style = "width:100%;", Maxlength = "10", type = "text" }))
                    <span id="errPaymentDate" style="color:red"></span>
                </div>
                <div class="col-xs-12 col-md-3 col-sm-6 col-lg-3">
                    @Html.Label("Receipt/Transaction Number", new { style = "font-weight:normal;", @class = "" })<span style="color: Red;">*</span><br />
                    @Html.TextBoxFor(model => model.ReceiptNumber, null, new { @class = "customKendoTextBox", style = "width:100%;", maxlength = 50 })
                    <span id="errReceiptNumber" style="color:red"></span>
                </div>
            </div>
            <div class="row"><span id="errorDetail" style="color: orangered"></span></div>
        </div>
    </div>

    <div class="row" style="margin-top: 20px;">
        <div class="col-xs-12 col-md-12 col-sm-12 col-lg-12">
            <div align="center">
                @if (Model.ClaimStatus == "New" || blueStatusList.Contains(Model.ClaimStatusId))
                {
                    <button type="button" class="button_blue" title="Submit" style="width: 100px;" onclick="SaveClaim()">
                        Save
                    </button>
                    <button type="submit" class="button_blue" title="Submit" style="width: 100px;" onclick="SubmitClaim()">
                        Submit
                    </button>
                }
                <button id="btnClose" title="Close" style="width: 100px" class="button_blue" onclick="CancelClaimSubmission()">
                    Cancel
                </button>
            </div>
            <br />
        </div>
    </div>
</div>

<script>
    $(document).ready(function () {
        GetMemberDetails($("#OrganizationID").val(), "0", "", '@ServiceUrl');

        BindProviders();

        var v = $("#VisitId").val();
        if ($("#VisitId").val() == 0) {
            $("#memberSearch").show();
            $("#divMainMemberDetails").hide();
        } else {
            $("#memberSearch").hide();
            $("#divMainMemberDetails").show();
            BindMemberPlans('@ServiceUrl', '@Session["OrganizationID"]', $("#MemberId").val());
            CalculateTotalPaid();
        }
    });

    function searchClear() {
        $("#searchFilter").val(null);
        //to clear grid
        GetMemberDetails($("#OrganizationID").val(), "0", "", '@ServiceUrl');
    }

    function searchMember() {
        var searchFilter = $("#searchFilter").val();
        GetMemberDetails('@Session["OrganizationID"]', "0", searchFilter, '@ServiceUrl');
    }

    function GetMemberDetails(OrganizationID, strMemberID, searchText, Url) {
        var webMethodName = "GetPPVMembersList";//GetOrganizationMemberDetails
        var ParameterNames = new Array();
        var ParameterValues = new Array();
        ParameterNames[0] = "OrganizationID";
        ParameterValues[0] = OrganizationID;
        ParameterNames[1] = "strMemberID";
        ParameterValues[1] = strMemberID;
        ParameterNames[2] = "searchtext";
        ParameterValues[2] = searchText;
        var Url = Url + "OrganizationServices";
        var jsonPostString = setJsonParameter(ParameterNames, ParameterValues, webMethodName);
        $.ajax({
        type: "POST",
            url: Url,
            data: jsonPostString,
            dataType: "text",
            contentType: "application/json",
            success: function (result) {
                var obj = jQuery.parseJSON(result);
                var list = obj[0];

                $("#memberGrid").data("kendoGrid").dataSource.data(list);
            },
            error: function (XMLHttpRequest, textStatus, errorThrown) {
            },
        });
    }

    function SubmitNewClaim(MemberID, MemberCardID, FirstName, LastName, Email, CountryCode, MobileNumber, DOB, PlanName, PlanStartDate, PlanEndDate, IsPlanActive) {
        $("#memberSearch").hide();
        $("#divMainMemberDetails").show()

        $("#MemberId").val(MemberID);
        $("#MemberCardID").val(MemberCardID);
        $("#MemberName").val(FirstName + " " + LastName);
        $("#MemberEmail").val(Email);
        $("#MemberDOB").val(getDate(DOB));
        $("#MemberMobileNumber").val(MobileNumber);
        if (IsPlanActive == "true") {
            $("#PlanName").val(PlanName);
            $("#PlanStartDate").val(getDate(PlanStartDate));
            $("#PlanEndDate").val(getDate(PlanEndDate));
        } else {
            $("#PlanName").val("");
            $("#PlanStartDate").val("");
            $("#PlanEndDate").val("");
        }

        $("[name=VisitTypeId]").val(['@PPCP07302018.Utils.GlobalFunctions.VisitType.InPerson']);
        $("#Copay").val("");
        $("#OtherCharges").val("$0");
        BindMemberPlans('@ServiceUrl', '@Session["OrganizationID"]', MemberID);
    }

    function BindMemberPlans(Url, OrganizationID, MemberID) {
        var webMethodName = "GetPPVMemberPlanDetailsByOrg";
        var ParameterNames = new Array();
        var ParameterValues = new Array();
        ParameterNames[0] = "OrganizationID";
        ParameterValues[0] = OrganizationID;
        ParameterNames[1] = "MemberID";
        ParameterValues[1] = MemberID;
        var Url = Url + "Member";
        var jsonPostString = setJsonParameter(ParameterNames, ParameterValues, webMethodName);
        $.ajax({
            type: "POST",
            url: Url,
            data: jsonPostString,
            dataType: "text",
            contentType: "application/json",
            success: function (result) {
                var obj = jQuery.parseJSON(result);
                var PlansList = obj[0];

                $("#memberPlanGrid").data("kendoGrid").dataSource.data(PlansList);
            },
            error: function (XMLHttpRequest, textStatus, errorThrown) {
            },
        });
    }

    function onProviderDropdownDataBound() {
        this.value('@Model.ProviderId');
        @*var dropdownlist = $("#dropdownlist").data("kendoDropDownList");
        dropdownlist.value('@Model.ProviderId');*@
        this.trigger("change");
    }

    function BindProviders() {
        var webMethodName = "GetProviderDetails";
        var ParameterNames = new Array();
        var ParameterValues = new Array();
        ParameterNames[0] = "strOrganizationID";
        ParameterValues[0] = $("#OrganizationID").val();
        ParameterNames[1] = "strProviderID";
        ParameterValues[1] = 0;
        var Url = '@ServiceUrl' + "OrganizationServices";
        var jsonPostString = setJsonParameter(ParameterNames, ParameterValues, webMethodName);
        $.ajax({

            type: "POST",
            url: Url,
            data: jsonPostString,
            dataType: "text",
            contentType: "application/json",
            success: function (result) {
                debugger;
                var obj = jQuery.parseJSON(result);
                var list = obj[0];
                $('#providerList').data('kendoDropDownList').dataSource.data(list);
            },
            error: function (XMLHttpRequest, textStatus, errorThrown) {
            },
        });
    }

    function memberPlanDatabound () {
        var dos=$("#DateOfService").val();
        SetDOSMessage(dos);
    }

    function DateOfServiceChange() {
    debugger;
        var dos = this.value();
        SetDOSMessage(dos);
    }

    $('input:radio[name="VisitTypeId"]').change(function() {
        var dos=$("#DateOfService").val();
        SetDOSMessage(dos);
    });

    function SetDOSMessage(dos) {
        debugger;
        var grid = $("#memberPlanGrid").data("kendoGrid");
        var data = grid.dataSource.data();
        var res = $.grep(data, function (d) {
            return new Date(d.PlanStartDate) <= new Date(dos) && new Date(d.PlanEndDate) >= new Date(dos);
        });
        if(res.length > 0) {
            $("#dosPlan").text("Plan Applied: " + res[0].PlanName + "; PlanDates: " + getFormattedDate(res[0].PlanStartDate) + " - " + getFormattedDate(res[0].PlanEndDate));
            if($('input[name="VisitTypeId"]:checked').val() == '@PPCP07302018.Utils.GlobalFunctions.VisitType.InPerson') {
                $("#Copay").val("$" + res[0].VisitFee);
            } else {
                $("#Copay").val("$" + res[0].TeleVisitFee);
            }
            CalculateTotalPaid();
            $("#errDOS").text("");
        } else {
            $("#dosPlan").text("");
            $("#errDOS").text("Please check the Date of Service. No Plan found for this date. ");
        }
    }

    function CalculateTotalPaid() {
        debugger;
        if($("#Copay").val() != "" ){
            if(moneyIsValid($("#Copay").val()) == false){
                $("#Copay").val("$0.00");
            }
        }

        if($("#OtherCharges").val() != "" ){
            if(moneyIsValid($("#OtherCharges").val()) == false){
                 $("#OtherCharges").val("$0.00");
            }
        }

        var Copay = $("#Copay").val();
        var OtherCharges = $("#OtherCharges").val();
        var a = Copay.substring(0,1);
        if(Copay.substring(0,1) == '$'){
            Copay = Copay.substring(1, Copay.length);
        }
        if(OtherCharges.substring(0,1) == '$'){
            OtherCharges = OtherCharges.substring(1, OtherCharges.length);
        }

        var total = parseFloat(Copay) + parseFloat(OtherCharges);
         $("#Copay").val('$' + parseFloat(Copay).toFixed(2));
         $("#OtherCharges").val('$' + parseFloat(OtherCharges).toFixed(2));
        $("#TotalPaid").val('$' + total.toFixed(2));
    }

    function CancelClaimSubmission() {
        debugger;
        var actionName = '@System.Web.HttpContext.Current.Request.RequestContext.RouteData.Values["controller"].ToString()';
        if(actionName == "Admin") {
            var getUrl = '@Url.Action("BillingDashboard", "Admin")';
            window.location.href = getUrl;
        }

        if(actionName == "Organization") {
            if($("#VisitId").val() > 0) {
                var getUrl = '@Url.Action("BillingDashboard", "Organization")';
                window.location.href = getUrl;
            } else {
                $("#memberSearch").show();
                $("#divMainMemberDetails").hide();

                //Clear Encounter section
                $("#DateOfService").val(null);
                $("#PrimaryProcedureCode").val("");
                $("#PrimaryDiagnosisCode").val("");
                $("#Copay").val("");
                $("#OtherCharges").val("");
                $("#TotalPaid").val("");
                $("#ReceiptNumber").val("");
                $("#PaymentDate").val(null);
                //$("#providerList").data("kendoDropDownList").values(null);
                $(".proclines").val("");
            }
        }
    }


    function clearErrors() {
        $("#errDateOfService").html("");
        $("#errPrimaryProcedureCode").html("");
        $("#errPrimaryDiagnosisCode").html("");
        $("#errProviderID").html("");
        $("#errCopay").html("");
        $("#errOtherCharges").html("");
        $("#errPaymentDate").html("");
        $("#errReceiptNumber").html("");
        $("#errVisitTypeId").html("");
        $("#errPaymentTypeId").html("");
    }

    function moneyIsValid(inputStr) {
        const regex = /^[0-9]+(\.)?[0-9]*$/;

        if(inputStr.substring(0,1) == '$'){
            inputStr = inputStr.substring(1, inputStr.length);
        }

        if (inputStr.match(regex) === null) {
            return false;
        }
    }

    function dateIsValid(inputStr) {
        const regex = /^\d{2}\/\d{2}\/\d{4}$/;

        if (inputStr.match(regex) === null) {
            return false;
        }
    }

    function SaveClaim() {
        clearErrors();

        var isError=0;;
        if($("#DateOfService").val() == ""){
            $("#errDateOfService").html("Required");
            isError = 1;
        };
        if($("#Copay").val() != "" ){
            if(moneyIsValid($("#Copay").val()) == false){
                $("#errCopay").html("Check format");
                isError = 1;
            }
        }
        if($("#OtherCharges").val() != "" ){
            if(moneyIsValid($("#OtherCharges").val()) == false){
                $("#errOtherCharges").html("Check format");
                isError = 1;
            }
        }
        if($("#PaymentDate").val() != "" ){
            if(dateIsValid($("#PaymentDate").val()) == false){
                $("#errPaymentDate").html("Check format");
                isError = 1;
            }
        }
        if($("#DateOfService").val() != "" ){
            if(dateIsValid($("#DateOfService").val()) == false){
                $("#errDateOfService").html("Check format");
                isError = 1;
            }
        }

        if(isError == 1) {
            return false;
        }

        GetMemberXML(@PPCP07302018.Utils.GlobalFunctions.ClaimStatus.Saved);
    }

    function SubmitClaim() {

        clearErrors();
        var isError=0;
        if($("#DateOfService").val() == ""){
            $("#errDateOfService").html("Required");
            isError = 1;
        };
        if($('input[name="VisitTypeId"]:checked').val() == ""  || $('input[name="VisitTypeId"]:checked').val() == undefined){
            $("#errVisitTypeId").html("Required");
            isError = 1;
        };
        if($("#PrimaryProcedureCode").val() == ""){
            $("#errPrimaryProcedureCode").html("Required");
            isError = 1;
        };
        if($("#PrimaryDiagnosisCode").val() == ""){
            $("#errPrimaryDiagnosisCode").html("Required");
            isError = 1;
        };
        if($("#providerList").data("kendoDropDownList").value() == ""){
            $("#errProviderID").html("Required");
            isError = 1;
        };
        if($('input[name="PaymentTypeId"]:checked').val() == ""  || $('input[name="PaymentTypeId"]:checked').val() == undefined){
            $("#errPaymentTypeId").html("Required");
            isError = 1;
        };
        if($("#Copay").val() == "" || $("#Copay").val() <= 0){
            $("#errCopay").html("Required");
            isError = 1;
        };
        if($("#Copay").val() != "" ){
            if(moneyIsValid($("#Copay").val()) == false){
                $("#errCopay").html("Check format");
                isError = 1;
            }
        }
        if($("#OtherCharges").val() == ""){
            $("#errOtherCharges").html("Required");
            isError = 1;
        };
        if($("#OtherCharges").val() != "" ){
            if(moneyIsValid($("#OtherCharges").val()) == false){
                $("#errOtherCharges").html("Check format");
                isError = 1;
            }
        }
        if($("#PaymentDate").val() == ""){
            $("#errPaymentDate").html("Required");
            isError = 1;
        };
        if($("#ReceiptNumber").val() == ""){
            $("#errReceiptNumber").html("Required");
            isError = 1;
        };

        if(isError == 1) {
            return false;
        }
        GetMemberXML(@PPCP07302018.Utils.GlobalFunctions.ClaimStatus.Submitted);
    }

    function GetMemberXML(ClaimStatus) {
    debugger;
        var MemberClaim = {};
        MemberClaim.VisitId = $("#VisitId").val();
        MemberClaim.MemberId = $("#MemberId").val();
        MemberClaim.OrganizationID = $("#OrganizationID").val();
        MemberClaim.ProviderId = $("#providerList").data("kendoDropDownList").value();
        MemberClaim.DateOfService = $("#DateOfService").val();
        MemberClaim.VisitTypeId = $('input[name="VisitTypeId"]:checked').val();
        MemberClaim.PrimaryProcedureCode = $("#PrimaryProcedureCode").val();
        MemberClaim.PrimaryDiagnosisCode = $("#PrimaryDiagnosisCode").val();
        var copay = $("#Copay").val();
        if(copay.substring(0,1) == '$'){
            copay = copay.substring(1, copay.length);
        }
        MemberClaim.Copay = copay;
        var oc = $("#OtherCharges").val();
        if(oc.substring(0,1) == '$'){
            oc = oc.substring(1, oc.length);
        }
        MemberClaim.OtherCharges = oc;
        MemberClaim.PaymentTypeId = $('input[name="PaymentTypeId"]:checked').val();
        MemberClaim.PaymentDate = $("#PaymentDate").val();
        MemberClaim.ReceiptNumber = $("#ReceiptNumber").val();
        MemberClaim.ModifiedBy = '@Session["UserID"]';
        MemberClaim.ClaimStatusId = ClaimStatus,
        MemberClaim.ProcedureLines = [];
        debugger;
        for (var i = 0; i < 3; i++) {
            var p = {
                ProcCode: $("#ProcedureLines_" + i + "__ProcCode").val(),
                Modifier1: $("#ProcedureLines_" + i + "__Modifier1").val(),
                Modifier2: $("#ProcedureLines_" + i + "__Modifier2").val(),
                Modifier3: $("#ProcedureLines_" + i + "__Modifier3").val(),
                Modifier4: $("#ProcedureLines_" + i + "__Modifier4").val()
            }
            MemberClaim.ProcedureLines.push(p);
        };

        $.ajax({
            type: 'POST',
            cache: false,
            url: '/Organization/GetMemberXML',
            data: MemberClaim,
            success: function (data, textStatus, jqXHR) {

                SaveClaimWebApiService(data, '@ServiceUrl');
            },
            error: function (XMLHttpRequest, textStatus, errorThrown) {
            },
        });
    }

    function SaveClaimWebApiService(data, Url) {
        var webMethodName = "SaveClaim";
        var ParameterName = data;
        var jsonPostString = setParameter(ParameterName, webMethodName);
        var Url = Url + "Organization";
        $("<div class='loadingSpinner'></div>").appendTo($("#divMainMemberDetails"));
        $.ajax({
            type: "POST",
            url: Url,
            data: jsonPostString,
            dataType: "json",
            contentType: "application/json",
            success: function (result) {
                debugger;
                $("#divMainMemberDetails").find(".loadingSpinner:first").remove();
                var obj = result[0];
                var ClaimSaveResult = obj[0].ClaimSaveResult;
                if(ClaimSaveResult != "") {
                    $("#errorDetail").html(ClaimSaveResult);
                } else {
                    //location.reload();
                    var getUrl = window.location.href.split('?')[0];
                    var uurl = getUrl + "?mode=edit&VisitId=" + obj[0].VisitId;
                    window.location = uurl;
                }
            },
            error: function (XMLHttpRequest, textStatus, errorThrown) {
            },
        });
    }

    function resendText() {
        $("#popupConfirmation").show();
        $("#confirmType").val("resendText")
        $("#lblconfirmMessage").html("Are you sure you want to send a text to the member to confirm visit?");
    }

    function resendEmail() {
        $("#popupConfirmation").show();
        $("#confirmType").val("resendEmail")
        $("#lblconfirmMessage").html("Are you sure you want to send an email to the member to confirm visit?");
    }

    function ClaimApproveClick() {
        if($("#AdminNotes").val() == ""){
            $("#errAdminNotes").html("Notes required for manual approval");
            return false;
        };
        $("#popupConfirmation").show();
        $("#confirmType").val("ClaimApproveClick")
        $("#lblconfirmMessage").html("Are you sure you want to approve this claim?");
    }

    function confirmPopUpYes() {
        //alert($("#confirmType").val());
        if($("#confirmType").val() == "ClaimApproveClick"){
            var webMethodName = "AdminClaimApproval";
            var ParameterNames = new Array();
            var ParameterValues = new Array();
            ParameterNames[0] = "VisitId";
            ParameterValues[0] = $("#VisitId").val();
            ParameterNames[1] = "AdminNotes";
            ParameterValues[1] = $("#AdminNotes").val();
            ParameterNames[2] = "ModifiedBy";
            ParameterValues[2] = '@Session["UserID"]';
            var Url = '@ServiceUrl' + "OrganizationServices";
            var jsonPostString = setJsonParameter(ParameterNames, ParameterValues, webMethodName);
            $.ajax({
                type: "POST",
                url: Url,
                data: jsonPostString,
                dataType: "text",
                contentType: "application/json",
                success: function (res) {
                     $("#popupConfirmation").hide();
                    var d = JSON.parse(res);
                    if (d[0].ResultID == 1) {
                        $("#lblMBMessage").html("Claim has been approved by admin and provider payment processed.");
                        $("#popupMessageBox").show();
                    } else {
                        $("#lblMBMessage").html("ERROR: There was an error processing the claim.");
                        $("#popupMessageBox").show();
                    }
                },
                error: function (XMLHttpRequest, textStatus, errorThrown) {
                },
            });
        }

        if($("#confirmType").val() == "resendText"){
            var webMethodName = "ResendClaimConfirmText";
            var ParameterNames = new Array();
            var ParameterValues = new Array();
            ParameterNames[0] = "VisitId";
            ParameterValues[0] = $("#VisitId").val();
            var Url = '@ServiceUrl' + "OrganizationServices";
            var jsonPostString = setJsonParameter(ParameterNames, ParameterValues, webMethodName);
            $.ajax({
                type: "POST",
                url: Url,
                data: jsonPostString,
                dataType: "text",
                contentType: "application/json",
                success: function (res) {
                     $("#popupConfirmation").hide();
                    var d = JSON.parse(res);
                    if (d[0].ResultID == 1) {
                        $("#lblMBMessage").html("A text has been sent to the member for visit confirmation.");
                        $("#popupMessageBox").show();
                    } else {
                        $("#lblMBMessage").html("ERROR: There was an error sending the text.");
                        $("#popupMessageBox").show();
                    }
                },
                error: function (XMLHttpRequest, textStatus, errorThrown) {
                },
            });
        }
         if($("#confirmType").val() == "resendEmail"){
            var webMethodName = "ResendClaimConfirmEmail";
            var ParameterNames = new Array();
            var ParameterValues = new Array();
            ParameterNames[0] = "VisitId";
            ParameterValues[0] = $("#VisitId").val();
            var Url = '@ServiceUrl' + "OrganizationServices";
            var jsonPostString = setJsonParameter(ParameterNames, ParameterValues, webMethodName);
            $.ajax({
                type: "POST",
                url: Url,
                data: jsonPostString,
                dataType: "text",
                contentType: "application/json",
                success: function (res) {
                     $("#popupConfirmation").hide();
                    var d = JSON.parse(res);
                    if (d[0].ResultID == 1) {
                        $("#lblMBMessage").html("An email has been sent to the member for visit confirmation.");
                        $("#popupMessageBox").show();
                    } else {
                        $("#lblMBMessage").html("ERROR: There was an error sending the email.");
                        $("#popupMessageBox").show();
                    }
                },
                error: function (XMLHttpRequest, textStatus, errorThrown) {
                },
            });
        }
    }

    /*
    function popupMessageBoxOK() {
        $("#popupMessageBox").hide();
        const box = document.getElementById('lblMBMessage');

        if (box.textContent.includes('ERROR')) {
          console.log('approval failed error');
        } else {
          CancelClaimSubmission();
        }

    }


    function setParameter(parameterName, methodName) {
        var obj = new Object();
        obj.WebMethodName = methodName;
        obj.XMLdata = parameterName;
        var resultData = JSON.stringify(obj);
        return resultData;
    }

    function getDate(str) { var ops = { year: 'numeric' }; ops.month = ops.day = '2-digit'; return new Date(str).toLocaleDateString(0, ops); }

    function setJsonParameter(parameterName, parameterValue, methodName) {
        var obj = new Object();
        obj.ParameterName = parameterName;
        obj.ParameterValue = parameterValue;
        obj.WebMethodName = methodName;
        var resultData = JSON.stringify(obj);
        resultData = getformattedJsonFromArray(resultData);
        return resultData;
    }

    function getformattedJsonFromArray(arrayObj) {
        arrayObj = arrayObj.replace(/"/g, "'");
        return arrayObj + "";
    }*/
</script>